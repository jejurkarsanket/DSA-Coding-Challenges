Problem Description
Design and implement a Linked List data structure.
A node in a linked list should have the following attributes - an integer value and a pointer to the next node. It should support the following operations:
---------------------------------------------------------------------------------------------------------------
insert_node(position, value) - To insert the input value at the given position in the linked list.
delete_node(position) - Delete the value at the given position from the linked list.
print_ll() - Print the entire linked list, such that each element is followed by a single space.
Note:
---------------------------------------------------------------------------------------------------------------
If an input position does not satisfy the constraint, no action is required.
Each print query has to be executed in a new line.

---------------------------------------------------------------------------------------------------------------
Problem Constraints
1 <= value <= 105
1 <= position <= n where, n is the size of the linked-list.
---------------------------------------------------------------------------------------------------------------


Input Format
First line contains an integer denoting number of cases, let's say t.
Next t line denotes the cases.
---------------------------------------------------------------------------------------------------------------

Output Format
When there is a case of print_ll(),  Print the entire linked list, such that each element is followed by a single space.
NOTE: You don't need to return anything.
---------------------------------------------------------------------------------------------------------------

Example Input
5
i 1 23
i 2 24
p
d 1
p
---------------------------------------------------------------------------------------------------------------

Example Output
23 24
24


Example Explanation
After first two cases linked list contains two elements 23 and 24.
At third case print: 23 24.
At fourth case delete value at first position, only one element left 24.
At fifth case print: 24.
----------------------------------------------------------------------------------------------------------

					                    CODE(C#)
----------------------------------------------------------------------------------------------------------

public class Node {
  public int Value;
  public Node Next;
  public Node(int Value) 
  {
    this.Value = val;
    this.Next = null;
  }
}

static int length = 0;
static Node head = null;

public static void insert_node(int position, int value) {
  // @params position, integer
  // @params value, integer
  if (position > length + 1 || position < 1)
    return;

  Node tempNode = new Node(value);
  if (head == null || position == 1) {
    tempNode.Next = head;
    head = tempNode;
  } else {
    int counter = 1;
    Node current = head;
    while (counter < (position - 1)) {
      current = current.Next;
      counter += 1;
    }
    tempNode.Next = current.Next;
    current.Next = tempNode;
  }
  length += 1;
}

public static void delete_node(int position) {
  // @params position, integer
  if (position > length) {
    return;
  }
  if (position == 1) {
    head = head.Next;
  } else {
    Node curr = head;
    int counter = 1;
    while (counter < (position - 1)) {
      counter += 1;
      curr = curr.Next;
    }
    curr.Next = curr.Next.Next;
  }
  length -= 1;
}

public static void print_ll() {
  // Output each element followed by a space
  Node tempNode = head;
  if (tempNode == null)
    return;
  while (tempNode.Next != null) {
    Console.Write(tempNode.Value + " ");
    tempNode = tempNode.Next;
  }
  if (tempNode != null)
    Console.Write(tempNode.Value);
}