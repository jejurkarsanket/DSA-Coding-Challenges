Problem Description
Reverse a linked list A from position B to C.
--------------------------------------------------------------------------------------------------------
NOTE: Do it in-place and in one-pass.
--------------------------------------------------------------------------------------------------------


Problem Constraints
1 <= |A| <= 106

1 <= B <= C <= |A|
--------------------------------------------------------------------------------------------------------


Input Format
The first argument contains a pointer to the head of the given linked list, A.

The second arugment contains an integer, B.

The third argument contains an integer C.
--------------------------------------------------------------------------------------------------------


Output Format
Return a pointer to the head of the modified linked list.
--------------------------------------------------------------------------------------------------------


Example Input
Input 1:

 A = 1 -> 2 -> 3 -> 4 -> 5
 B = 2
 C = 4

Input 2:

 A = 1 -> 2 -> 3 -> 4 -> 5
 B = 1
 C = 5
--------------------------------------------------------------------------------------------------------

Example Output
Output 1:

 1 -> 4 -> 3 -> 2 -> 5
Output 2:

 5 -> 4 -> 3 -> 2 -> 1
--------------------------------------------------------------------------------------------------------

Example Explanation
Explanation 1:

 In the first example, we want to reverse the highlighted part of the given linked list : 1 -> 2 -> 3 -> 4 -> 5 
 Thus, the output is 1 -> 4 -> 3 -> 2 -> 5 
Explanation 2:

 In the second example, we want to reverse the highlighted part of the given linked list : 1 -> 4 -> 3 -> 2 -> 5  
 Thus, the output is 5 -> 4 -> 3 -> 2 -> 1 
--------------------------------------------------------------------------------------------------------
							Solution(C#)
--------------------------------------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {this.val = x; this.next = null;}
 * }
 */
class Solution {
    public static Tuple<ListNode,ListNode> rev(ListNode t, int k)
    {
            ListNode curr = t;
            ListNode prev = null;
            ListNode currNext = null;
            while (k > 0 && t != null)
            {
                currNext = curr.next;
                curr.next = prev;
                prev = curr;
                curr = currNext;
                k--;
            }
            return Tuple.Create(prev,currNext);
    }
    public ListNode reverseBetween(ListNode A, int B, int C) {
            ListNode temp = A;
            int b = B;
            ListNode ptBehindB = temp;
            if (B == 1 && C == 1)
            {
                return A;
            }
            while (B > 1)
            {
                ptBehindB = temp;
                temp = temp.next;
                B--;
            }
            var tuple = rev(temp, C - b+1);
            if (b == 1)
            {
                ptBehindB.next = tuple.Item2;
                ListNode temp1 = tuple.Item1;
                return temp1;
            }
            else
            {
                if (tuple.Item2 != null)
                {
                    ptBehindB.next = tuple.Item1;
                    temp.next = tuple.Item2;
                }
                else
                {
                    ptBehindB.next = tuple.Item1;
                    
                }

            }
            
            return A;

    }
}
